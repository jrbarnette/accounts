Unit tests currently only partly cover saving files with an Account
that has more than one history entry; we cover Account objects, but
not complete AccountStore files.  Want to add more coverage before
we go much further.

The chain of trust for the unit tests asserts that we know that
save/restore cycles work because of the result of comparing two
objects with equals().  However, we have no tests that prove that we
can trust the equals() method, either for Account or AccountStore.

There was a bug fixed at commit 536967f.  Need to add a unit test
that could catch the bug.

Bugs/risks:
  * The Save As dialog should ask for the password twice, to
    guarantee that it's not mis-typed.
  * The various file dialogs shouldn't enable the action button
    until there's a valid password.

Implement support to show/manipulate stored account data history.

Implement support for merging accounts files together.

Skip the whole "save file" option, and automatically write back after
any change is committed.

Think about making AccountStore implement Collection, or some
subinterface.  (Maybe too much trouble?  Collection has a lot of
methods, and most aren't interesting.)

Instead of deleting accounts, allow an option that just hides the
account in the UI.  Looking at my current account list, though, this
might not help much; most of them are still active.  What would
really be helpful would be providing a hierarchical tree structured
list.

Save password generation parameters with the account.

--
Change Icon/naming so that the running program can be distinguished
from other Java programs.

Keyboard shortcuts

Organize the accounts list hierarchically (or some other layout?)

Save file as executable script that embeds the account data shar-style

Button to open URL

change focus-cycle so that from password, we go to "Update" or "Change"
    or maybe:  if changes, "Update/Change", if no changes "Copy"
