-- Current status
Ready to implement support for displaying account history logs.
Roughly, I think that means these things:
  * Update Account with methods for fetching history entries by
    index.  That could mean ditching the TreeSet for a Vector.
  * Update AccountDataPanel with a current history index; at
    selection, the index is set to 0 for "latest entry".
  * Add methods for basic operations:
      + Move back in time, and update the display from the log
	entry.
      + Move forward in time, and update the display from the log
	entry.
      + Answer whether we're at the first/last entry.
  * Update AccountStorePanel with buttons to use the new
    AccountDataPanel methods.

N.B. Editing data fields should be disabled if we're not at the
latest entry.  Going back in time should be disabled if there are
field edits that need to be saved or reverted.

-- Current needs
Unit tests currently only partly cover saving files with an Account
that has more than one history entry; we cover Account objects, but
not complete AccountStore files.  Want to add more coverage before
we go much further.

The chain of trust for the unit tests asserts that we know that
save/restore cycles work because of the result of comparing two
AccountStore objects with equals().  However, our tests for equals()
don't prove very much for AccountStore, and prove even less for
Account.

There was a bug fixed at commit 536967f.  Need to add a unit test
that could catch the bug.  In practice, that means we need two tests:
  * Construct an AccountStore object from program data, save it, and
    then construct a second object from the saved image.  Assert that
    the two objects are equal.
  * Construct two AccountStore objects from distinct program data,
    save the first object, and then read the saved image into the
    second object.  Assert that the two objects are equal.
Currently. we have only the first test.

Bugs/risks:
  * The Save As dialog should ask for the password twice, to
    guarantee that it's not mis-typed.
  * The various file dialogs shouldn't enable the action button
    until there's a valid password.

Implement support to show/manipulate stored account data history.

Implement support for merging accounts files together.

Skip the whole "save file" option, and automatically write back after
any change is committed.

Think about making AccountStore implement Collection, or some
subinterface.  (Maybe too much trouble?  Collection has a lot of
methods, and most aren't interesting.)

Instead of deleting accounts, allow an option that just hides the
account in the UI.  Looking at my current account list, though, this
might not help much; most of them are still active.  What would
really be helpful would be providing a hierarchical tree structured
list.

Save password generation parameters with the account.

--
Change Icon/naming so that the running program can be distinguished
from other Java programs.

Keyboard shortcuts

Organize the accounts list hierarchically (or some other layout?)

Save file as executable script that embeds the account data shar-style

Button to open URL

change focus-cycle so that from password, we go to "Update" or "Change"
    or maybe:  if changes, "Update/Change", if no changes "Copy"
