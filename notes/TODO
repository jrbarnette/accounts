-- Small features/Refactoring
  - If you save an AccountStore twice in a row, you get different bytes
    even though the content is the same.  This happens because the
    IV and password salt are unconditionally re-generated every time.
    Maybe consider regenerating only if something changes?
  - Consider refactoring around AccountData in unit tests:
    - Most bits of Account.UpdateEntry and AccountTestData are common;
      extract them into a new class, say "ConcreteAccountData".
    - Some test methods in TestAccount are against those common bits;
      extract them to a new test class.
  - The Merge file chooser dialog uses "Open" for its button text.
    It should say "Merge" instead.  Analagous problem for the "New
    file" dialog.
      - Problem is that the Java widget effectively only allows
	customizing the button for "SAVE" dialogs...
  - Allow multiple frames to have different files open at once.
  - Allow saving individual accounts to create a new file, or moving
    records from one file to another. (To be enabled by multiple
    frames per App).

-- Current state
File merge is done; think about making it better:
  * Want to be able to review changes after merge.
  * Want to be able to see differences between two files.
  * Want to be able to delete unneeded account records.

Need to handle operations that could create duplicate descriptions:
  * A new account in the target could have the same description as
    an existing account.
  * Merging histories could turn an existing account into a
    duplicate.
  * Rule:  If an account in the source would create a duplicate,
    merge nothing.
  * Return value should be something like "all the accounts that
    couldn't be merged."

-- Bugs
In save dialogs, changes to the "Save As" file name text don't become
the file name if you merely transfer focus out; you must click "Save"
or press <return> in the text box.  That means this sequence fails:
  * Fill in the "Save As" file name.
  * Click "Save".  Focus goes to the password fields.
  * Fill in the password fields.
  * Change the "Save As" file name.
  * Click on the password fields, and press <return>
At the end of the this, the file name will be the name first entered,
not the edited name.

In save dialogs, checking that the password confirmation matches is
flaky.  It's possible to make the two fields mismatch and still save
successfully:
  * If both match, and then you change the main box, the match isn't
    tested.
  * If both match, and the confirm box changes, the match isn't
    tested.
  * Maybe other problems; I haven't fully characterized the
    behavior.

For several classes, we override equals(), but don't override
hashCode().  The Java API spec says that that's rude; we'll have to
fix it if we ever need/want to use a hash-based collection
(e.g. HashSet)

The AccountFileDialog widget has undesirable keyboard focus
behaviors for showSaveDialog().  Basically, clicking 'Save' puts the
focus in the file list, and keystrokes can't get it out; you have to
use a mouse click.  It happens because of these lines:
	if (f == null || f.isDirectory()) {
	    fileChooser.requestFocusInWindow();
	    return;
	}
There's no obvious way to persuade the file chooser to select the
text box over the file list...

-- Current needs
Unit test naming is a bit inconsistent now:  Sometimes "*Test.java",
sometimes "Test*.java".  The "run_tests" script may be more
forgiving, but the human brain isn't...

Unit tests currently only partly cover saving files with an Account
that has more than one history entry; we cover Account objects, but
not complete AccountStore files.  Want to add more coverage before
we go much further.

The chain of trust for the unit tests asserts that we know that
save/restore cycles work because of the result of comparing two
AccountStore objects with equals().  However, our tests for equals()
don't prove very much for AccountStore, and prove even less for
Account.

The various buttons and fields have properties (text, enabled) that
depend on the account data panel in complicated ways.  The logic
can't really be simplified or changed:  it's driven by preventing
human error and improving usability.  But... The way we update the
buttons based on changes in the account data panel is _also_
complicated, and _that_ is probably something we could fix...

Duplicate descriptions are disallowed for add/create/update in
AccountStore.  However, the UI doesn't handle this failure.  Need to
pop up a modal dialog that says that it's a duplicate and then goes
back to editing.

There was a bug fixed at commit 536967f.  Need to add a unit test that
could catch the bug.  In practice, that means we need two tests:
  * Construct an AccountStore object from program data, save it, and
    then construct a second object from the saved image.  Assert that
    the two objects are equal.
  * Construct two AccountStore objects from distinct program data,
    save the first object, and then read the saved image into the
    second object.  Assert that the two objects are equal.
Currently. we have only the first test.

Implement support to manipulate (esp. delete) stored account data
history rather than merely showing it.

Think about making AccountStore implement Collection, or some
subinterface.  (Maybe too much trouble?  Collection has a lot of
methods, and most aren't interesting.)

Instead of deleting accounts, allow an option that just hides the
account in the UI.  Looking at my current account list, though, this
might not help much; most of them are still active.  What would
really be helpful would be providing a hierarchical tree structured
list.

Save password generation parameters with the account.

-- Feature Ideas
Change Icon/naming so that the running program can be distinguished
from other Java programs.

Keyboard shortcuts

Organize the accounts list hierarchically (or some other layout?)

Save file as executable script that embeds the account data shar-style

Button to open URL

change focus-cycle so that from password, we go to "Update" or "Change"
    or maybe:  if changes, "Update/Change", if no changes "Copy"
